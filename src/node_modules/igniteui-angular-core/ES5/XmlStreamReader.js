import * as tslib_1 from "tslib";
import { NonBlockingStreamReader } from "./NonBlockingStreamReader";
import { XmlInputStream } from "./XmlInputStream";
import { markType } from "./type";
import { XmlException } from "./XmlException";
var XmlStreamReader = /** @class */ (function (_super) {
    tslib_1.__extends(XmlStreamReader, _super);
    function XmlStreamReader(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = this;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    var c = _rest[0];
                    _this = _super.call(this, c, c.actualEncoding != null ? c.actualEncoding : XmlInputStream.strictUTF8) || this;
                    _this.ae = null;
                    _this.ae = c;
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    var d = [new XmlInputStream(c)];
                    {
                        var f = d[0];
                        _this = _super.call(this, f, f.actualEncoding != null ? f.actualEncoding : XmlInputStream.strictUTF8) || this;
                        _this.ae = null;
                        _this.ae = f;
                    }
                }
                break;
        }
        return _this;
    }
    XmlStreamReader.prototype.i = function () {
        this.ae.close();
    };
    XmlStreamReader.prototype.c = function (a, b, c) {
        try {
            return _super.prototype.c.call(this, a, b, c);
        }
        catch (d) {
            throw new XmlException(3, "invalid data.");
        }
    };
    XmlStreamReader.prototype.dispose1 = function (a) {
        _super.prototype.dispose1.call(this, a);
        if (a) {
            this.i();
        }
    };
    XmlStreamReader.$t = markType(XmlStreamReader, 'XmlStreamReader', NonBlockingStreamReader.$);
    XmlStreamReader.ad = new XmlException(3, "invalid data.");
    return XmlStreamReader;
}(NonBlockingStreamReader));
export { XmlStreamReader };
//# sourceMappingURL=XmlStreamReader.js.map