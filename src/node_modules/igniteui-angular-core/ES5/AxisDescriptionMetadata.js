/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { AxisRangeChangedEventArgsDescriptionMetadata } from "./AxisRangeChangedEventArgsDescriptionMetadata";
import { RenderRequestedEventArgsDescriptionMetadata } from "./RenderRequestedEventArgsDescriptionMetadata";
var AxisDescriptionMetadata = /** @class */ (function (_super) {
    tslib_1.__extends(AxisDescriptionMetadata, _super);
    function AxisDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AxisDescriptionMetadata.b = function (a) {
        if (AxisDescriptionMetadata.a == null) {
            AxisDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            AxisDescriptionMetadata.c(a, AxisDescriptionMetadata.a);
            AxisRangeChangedEventArgsDescriptionMetadata.d(a);
            RenderRequestedEventArgsDescriptionMetadata.d(a);
        }
    };
    AxisDescriptionMetadata.c = function (a, b) {
        b.item("FormatLabelRef", "(w:FormatLabel)MethodRef");
        b.item("Title", "String");
        b.item("Stroke", "Brush");
        b.item("ActualStroke", "Brush");
        b.item("StrokeThickness", "Number:double");
        b.item("Strip", "Brush");
        b.item("MajorStroke", "Brush");
        b.item("ActualMajorStroke", "Brush");
        b.item("MajorStrokeThickness", "Number:double");
        b.item("MinorStroke", "Brush");
        b.item("ActualMinorStroke", "Brush");
        b.item("MinorStrokeThickness", "Number:double");
        b.item("TickStroke", "Brush");
        b.item("TickStrokeThickness", "Number:double");
        b.item("TickLength", "Number:double");
        b.item("IsDisabled", "Boolean");
        b.item("IsInverted", "Boolean");
        b.item("UseEnhancedIntervalManagement", "Boolean");
        b.item("EnhancedIntervalMinimumCharacters", "Number:int");
        b.item("LabelTextStyle", "(w:LabelSettings.TextStyle)String");
        b.item("LabelTextColor", "(w:LabelSettings.TextColor)Brush");
        b.item("LabelLocation", "(w:LabelSettings.Location)ExportedType:string:AxisLabelsLocation");
        b.item("LabelVisibility", "(w:LabelSettings.Visibility)ExportedType:string:Visibility");
        b.item("LabelShowFirstLabel", "(w:LabelSettings.ShowFirstLabel)Boolean");
        b.item("LabelAngle", "(w:LabelSettings.Angle)Number:double");
        b.item("LabelExtent", "(w:LabelSettings.Extent)Number:double");
        b.item("LabelLeftMargin", "(w:LabelSettings.LeftMargin)Number:double");
        b.item("LabelRightMargin", "(w:LabelSettings.RightMargin)Number:double");
        b.item("LabelTopMargin", "(w:LabelSettings.TopMargin)Number:double");
        b.item("LabelBottomMargin", "(w:LabelSettings.BottomMargin)Number:double");
        b.item("LabelHorizontalAlignment", "(w:LabelSettings.HorizontalAlignment)ExportedType:string:HorizontalAlignment");
        b.item("LabelVerticalAlignment", "(w:LabelSettings.VerticalAlignment)ExportedType:string:VerticalAlignment");
        b.item("CrossingAxisRef", "(w:CrossingAxis)DataRef::object");
        b.item("CrossingValueRef", "(w:CrossingValue)DataRef");
        b.item("TitlePosition", "(w:TitleSettings.Position)ExportedType:string:AxisTitlePosition");
        b.item("TitleTextStyle", "(w:TitleSettings.TextStyle)String");
        b.item("TitleTextColor", "(w:TitleSettings.TextColor)Brush");
        b.item("TitleLocation", "(w:TitleSettings.Location)ExportedType:string:AxisLabelsLocation");
        b.item("TitleVisibility", "(w:TitleSettings.Visibility)ExportedType:string:Visibility");
        b.item("TitleShowFirstLabel", "(w:TitleSettings.ShowFirstLabel)Boolean");
        b.item("TitleAngle", "(w:TitleSettings.Angle)Number:double");
        b.item("TitleExtent", "(w:TitleSettings.Extent)Number:double");
        b.item("TitleLeftMargin", "(w:TitleSettings.LeftMargin)Number:double");
        b.item("TitleRightMargin", "(w:TitleSettings.RightMargin)Number:double");
        b.item("TitleTopMargin", "(w:TitleSettings.TopMargin)Number:double");
        b.item("TitleBottomMargin", "(w:TitleSettings.BottomMargin)Number:double");
        b.item("TitleHorizontalAlignment", "(w:TitleSettings.HorizontalAlignment)ExportedType:string:HorizontalAlignment");
        b.item("TitleVerticalAlignment", "(w:TitleSettings.VerticalAlignment)ExportedType:string:VerticalAlignment");
        b.item("CoercionMethodsRef", "(w:CoercionMethods)DataRef");
        b.item("ExpectFunctions", "Boolean");
        b.item("RangeChangedRef", "EventRef::rangeChanged");
        b.item("RenderRequestedRef", "EventRef::renderRequested");
        AxisDescriptionMetadata.e(a, b);
    };
    AxisDescriptionMetadata.d = function (a) {
        AxisDescriptionMetadata.b(a);
        a.m("Axis", AxisDescriptionMetadata.a);
    };
    AxisDescriptionMetadata.e = function (a, b) {
        b.item("Label", "(w:Label/AxisLabelTransform)String");
    };
    AxisDescriptionMetadata.$t = markType(AxisDescriptionMetadata, 'AxisDescriptionMetadata');
    AxisDescriptionMetadata.a = null;
    return AxisDescriptionMetadata;
}(Base));
export { AxisDescriptionMetadata };
//# sourceMappingURL=AxisDescriptionMetadata.js.map