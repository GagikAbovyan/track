/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Base, String_$type, markType } from "./type";
import { TypeDescriptionPlatform_$type } from "./TypeDescriptionPlatform";
import { Dictionary$2 } from "./Dictionary$2";
import { stringContains } from "./string";
var TypeDescriptionMetadata = /** @class */ (function (_super) {
    tslib_1.__extends(TypeDescriptionMetadata, _super);
    function TypeDescriptionMetadata() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.i = null;
        _this.j = null;
        _this.a = 0;
        _this.l = null;
        _this.k = null;
        _this.f = null;
        _this.c = new Dictionary$2(TypeDescriptionPlatform_$type, String_$type, 0);
        _this.d = new Dictionary$2(TypeDescriptionPlatform_$type, String_$type, 0);
        return _this;
    }
    TypeDescriptionMetadata.prototype.m = function (a, b) {
        if (stringContains(b, "/")) {
            var c = b.split('/');
            this.d.item(a, c[1].trim());
            this.c.item(a, c[0].trim());
        }
        else {
            this.c.item(a, b.trim());
        }
    };
    TypeDescriptionMetadata.e = function (a) {
        return a.substr(0, 1).toLowerCase() + a.substr(1);
    };
    TypeDescriptionMetadata.prototype.g = function (a) {
        var b = "";
        if (this.c.containsKey(a)) {
            b = this.c.item(a);
        }
        else {
            b = this.j;
        }
        if (TypeDescriptionMetadata.b(a)) {
            return TypeDescriptionMetadata.e(b);
        }
        return b;
    };
    TypeDescriptionMetadata.b = function (a) {
        if (a == 3 || a == 1 || a == 4 || a == 2) {
            return true;
        }
        return false;
    };
    TypeDescriptionMetadata.prototype.h = function (a) {
        if (this.d.containsKey(a)) {
            return this.d.item(a);
        }
        else {
            return null;
        }
    };
    TypeDescriptionMetadata.$t = markType(TypeDescriptionMetadata, 'TypeDescriptionMetadata');
    return TypeDescriptionMetadata;
}(Base));
export { TypeDescriptionMetadata };
//# sourceMappingURL=TypeDescriptionMetadata.js.map