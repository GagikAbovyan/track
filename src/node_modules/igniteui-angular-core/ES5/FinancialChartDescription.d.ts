import { XYChartDescription } from "./XYChartDescription";
import { Type } from "./type";
export declare class FinancialChartDescription extends XYChartDescription {
    static $t: Type;
    protected get_type(): string;
    constructor();
    private h5;
    leftMargin: number;
    private hl;
    isHorizontalZoomEnabled: boolean;
    private h8;
    toolbarHeight: number;
    private hr;
    yAxisIsLogarithmic: boolean;
    private iy;
    yAxisLogarithmBase: number;
    private ia;
    yAxisInterval: number;
    private ic;
    yAxisMinimumValue: number;
    private ib;
    yAxisMaximumValue: number;
    private id;
    yAxisMinorInterval: number;
    private i6;
    volumeType: string;
    private i7;
    xAxisMode: string;
    private ja;
    yAxisMode: string;
    private hn;
    isToolbarVisible: boolean;
    private i5;
    chartType: string;
    private i8;
    yAxisLabelHorizontalAlignment: string;
    private hp;
    isWindowSyncedToVisibleRange: boolean;
    private gz;
    indicatorTypes: string[];
    private g4;
    overlayTypes: string[];
    private hq;
    yAxisAbbreviateLargeNumbers: boolean;
    private h7;
    resolution: number;
    private i9;
    yAxisLabelLocation: string;
    private jb;
    zoomSliderType: string;
    private g0;
    negativeBrushes: string[];
    private g1;
    negativeOutlines: string[];
    private g2;
    overlayBrushes: string[];
    private g3;
    overlayOutlines: string[];
    private g7;
    volumeOutlines: string[];
    private g6;
    volumeBrushes: string[];
    private gy;
    indicatorNegativeBrushes: string[];
    private gw;
    indicatorBrushes: string[];
    private h9;
    volumeThickness: number;
    private h6;
    overlayThickness: number;
    private h4;
    indicatorThickness: number;
    private gx;
    indicatorDisplayTypes: string[];
    private iu;
    indicatorPeriod: number;
    private h3;
    indicatorMultiplier: number;
    private ix;
    indicatorSmoothingPeriod: number;
    private iv;
    indicatorShortPeriod: number;
    private it;
    indicatorLongPeriod: number;
    private iw;
    indicatorSignalPeriod: number;
    private g5;
    rangeSelectorOptions: string[];
    private gv;
    customIndicatorNames: string[];
    private ho;
    isVerticalZoomEnabled: boolean;
    private jc;
    zoomSliderXAxisMajorStroke: string;
    private ie;
    zoomSliderXAxisMajorStrokeThickness: number;
    private hm;
    isLegendVisible: boolean;
    private h0;
    xAxisMinimumValue: Date;
    private hz;
    xAxisMaximumValue: Date;
    private _ApplyCustomIndicatorsRef;
    ApplyCustomIndicatorsRef: string;
}
