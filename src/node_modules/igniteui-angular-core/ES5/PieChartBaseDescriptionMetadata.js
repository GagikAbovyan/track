/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { LabelClickEventArgsDescriptionMetadata } from "./LabelClickEventArgsDescriptionMetadata";
import { SelectedItemChangingEventArgsDescriptionMetadata } from "./SelectedItemChangingEventArgsDescriptionMetadata";
import { SelectedItemsChangingEventArgsDescriptionMetadata } from "./SelectedItemsChangingEventArgsDescriptionMetadata";
import { SelectedItemChangedEventArgsDescriptionMetadata } from "./SelectedItemChangedEventArgsDescriptionMetadata";
import { SelectedItemsChangedEventArgsDescriptionMetadata } from "./SelectedItemsChangedEventArgsDescriptionMetadata";
import { SliceClickEventArgsDescriptionMetadata } from "./SliceClickEventArgsDescriptionMetadata";
var PieChartBaseDescriptionMetadata = /** @class */ (function (_super) {
    tslib_1.__extends(PieChartBaseDescriptionMetadata, _super);
    function PieChartBaseDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PieChartBaseDescriptionMetadata.b = function (a) {
        if (PieChartBaseDescriptionMetadata.a == null) {
            PieChartBaseDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            PieChartBaseDescriptionMetadata.c(a, PieChartBaseDescriptionMetadata.a);
            LabelClickEventArgsDescriptionMetadata.d(a);
            SelectedItemChangingEventArgsDescriptionMetadata.d(a);
            SelectedItemsChangingEventArgsDescriptionMetadata.d(a);
            SelectedItemChangedEventArgsDescriptionMetadata.d(a);
            SelectedItemsChangedEventArgsDescriptionMetadata.d(a);
            SliceClickEventArgsDescriptionMetadata.d(a);
        }
    };
    PieChartBaseDescriptionMetadata.c = function (a, b) {
        b.item("InnerExtent", "Number:double");
        b.item("ValueMemberPath", "String");
        b.item("LabelMemberPath", "String");
        b.item("LegendLabelMemberPath", "String");
        b.item("LabelsPosition", "ExportedType:string:LabelsPosition");
        b.item("LabelOuterColor", "Brush");
        b.item("LabelInnerColor", "Brush");
        b.item("LeaderLineVisibility", "ExportedType:string:Visibility");
        b.item("LeaderLineType", "ExportedType:string:LeaderLineType");
        b.item("LeaderLineMargin", "Number:double");
        b.item("ToolTipRef", "(w:ToolTip)DataRef");
        b.item("OthersCategoryThreshold", "Number:double");
        b.item("OthersCategoryType", "ExportedType:string:OthersCategoryType");
        b.item("OthersCategoryText", "String");
        b.item("ExplodedRadius", "Number:double");
        b.item("RadiusFactor", "Number:double");
        b.item("AllowSliceSelection", "Boolean");
        b.item("AllowSliceExplosion", "Boolean");
        b.item("ExplodedSlices", "Collection:int:IndexCollection:Int32");
        b.item("LabelExtent", "Number:double");
        b.item("StartAngle", "Number:double");
        b.item("SweepDirection", "ExportedType:string:SweepDirection");
        b.item("OthersCategoryFill", "(w:OthersCategoryStyle.Fill)String");
        b.item("OthersCategoryStroke", "(w:OthersCategoryStyle.Stroke)String");
        b.item("OthersCategoryStrokeThickness", "(w:OthersCategoryStyle.StrokeThickness)Number:double");
        b.item("OthersCategoryOpacity", "(w:OthersCategoryStyle.Opacity)Number:double");
        b.item("SelectedSliceFill", "(w:SelectedStyle.Fill)String");
        b.item("SelectedSliceStroke", "(w:SelectedStyle.Stroke)String");
        b.item("SelectedSliceStrokeThickness", "(w:SelectedStyle.StrokeThickness)Number:double");
        b.item("SelectedSliceOpacity", "(w:SelectedStyle.Opacity)Number:double");
        b.item("Brushes", "BrushCollection:string");
        b.item("Outlines", "BrushCollection:string");
        b.item("LegendItemTemplate", "DataTemplate");
        b.item("LegendItemBadgeTemplate", "DataTemplate");
        b.item("IsSurfaceInteractionDisabled", "Boolean");
        b.item("FormatLabelRef", "(w:FormatLabel)MethodRef");
        b.item("FormatLegendLabelRef", "(w:FormatLegendLabel)MethodRef");
        b.item("PixelScalingRatio", "Number:double");
        b.item("ActualPixelScalingRatio", "Number:double");
        b.item("SelectionMode", "ExportedType:string:SliceSelectionMode");
        b.item("SelectedItemRef", "(w:SelectedItem)DataRef");
        b.item("SelectedItems", "Collection:Object:ObjectCollection:Object");
        b.item("TextStyle", "String");
        b.item("LabelClickRef", "EventRef::labelClick");
        b.item("SelectedItemChangingRef", "EventRef::selectedItemChanging");
        b.item("SelectedItemsChangingRef", "EventRef::selectedItemsChanging");
        b.item("SelectedItemChangedRef", "EventRef::selectedItemChanged");
        b.item("SelectedItemsChangedRef", "EventRef::selectedItemsChanged");
        b.item("SliceClickRef", "EventRef::sliceClick");
    };
    PieChartBaseDescriptionMetadata.d = function (a) {
        PieChartBaseDescriptionMetadata.b(a);
        a.m("PieChartBase", PieChartBaseDescriptionMetadata.a);
    };
    PieChartBaseDescriptionMetadata.$t = markType(PieChartBaseDescriptionMetadata, 'PieChartBaseDescriptionMetadata');
    PieChartBaseDescriptionMetadata.a = null;
    return PieChartBaseDescriptionMetadata;
}(Base));
export { PieChartBaseDescriptionMetadata };
//# sourceMappingURL=PieChartBaseDescriptionMetadata.js.map