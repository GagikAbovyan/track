import { Base, Type } from "./type";
import { IComponentRendererAdapter } from "./IComponentRendererAdapter";
import { TypeDescriptionContext } from "./TypeDescriptionContext";
import { TypeDescriptionPropretyTransforms } from "./TypeDescriptionPropretyTransforms";
import { Description } from "./Description";
export declare class ComponentRenderer extends Base {
    static $t: Type;
    b: IComponentRendererAdapter;
    private _context;
    context: TypeDescriptionContext;
    f: TypeDescriptionPropretyTransforms;
    private static platform;
    constructor();
    private c();
    private z;
    private y;
    private ab;
    private aa;
    private x;
    render(a: Description, b: any): void;
    private bb(a, b);
    private bi(a);
    provideRefValue(a: any, b: string, c: any): void;
    removeRefValue(a: any, b: string): void;
    clearRefValues(a: any): void;
    private bj(a, b);
    private bl(a, b);
    private bo(a, b);
    private a9(a, b, c);
    private bc(a, b, c);
    private bd(a, b, c);
    private l(a, b, c);
    private r(a, b, c);
    private w(a, b, c, d);
    private v(a, b, c, d, e, f);
    private av(a, b, c);
    private at(a);
    private as(a);
    private ar(a);
    private aq(a);
    private ap(a);
    private ao(a);
    private an(a);
    private a1(a, b);
    private am(a, b, c);
    private a0(a, b);
    private ak(a);
    private az(a, b);
    private a3(a);
    private aj(a);
    private ai(a);
    private ah(a);
    private a2(a);
    private ag(a);
    private af(a);
    private ae(a, b, c);
    private bm(a, b, c, d, e, f);
    private ba(a, b);
    private a7(a, b);
    private k(a, b);
    private j(a, b);
    private a(a, b);
    private ax(a, b);
    private ay(a, b, c);
    private q(a, b, c);
    private u(a, b, c, d);
    private p(a, b, c);
    private bk(a, b, c, d);
    private t(a, b, c);
    private a8(a, b, c);
    private ad(a, b, c);
    private o(a, b, c);
    private bf(a, b, c, d);
    private s(a, b, c);
    private n(a, b, c);
    private g(a, b, c);
    private a4(a, b, c, d);
    private au(a, b, c, d);
    private al(a, b);
    private ac(a);
    private m(a, b, c);
    private a5(a, b, c, d);
    private bn(a, b, c);
    private aw(a, b);
    private i(a, b, c);
    private h(a, b);
}
