import * as tslib_1 from "tslib";
import { BaseError, markType } from "./type";
var XmlException = /** @class */ (function (_super) {
    tslib_1.__extends(XmlException, _super);
    function XmlException(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = this;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    _this = _super.call(this, 0) || this;
                    _this.d = 0;
                    _this.f = 0;
                    _this.i = null;
                    _this.h = null;
                    _this.c = null;
                    _this.h = "Xml_DefaultException";
                    _this.c = new Array(1);
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    var d = _rest[1];
                    _this = _super.call(this, 2, c, d) || this;
                    _this.d = 0;
                    _this.f = 0;
                    _this.i = null;
                    _this.h = null;
                    _this.c = null;
                    _this.h = "Xml_UserException";
                    _this.c = [c];
                }
                break;
            case 2:
                {
                    var c = _rest[0];
                    var d = _rest[1];
                    var e = _rest[2];
                    _this = _super.call(this, 0) || this;
                    _this.d = 0;
                    _this.f = 0;
                    _this.i = null;
                    _this.h = null;
                    _this.c = null;
                }
                break;
            case 3:
                {
                    var c = _rest[0];
                    _this = _super.call(this, 1, c) || this;
                    _this.d = 0;
                    _this.f = 0;
                    _this.i = null;
                    _this.h = null;
                    _this.c = null;
                    _this.h = "Xml_UserException";
                    _this.c = [c];
                }
                break;
            case 4:
                {
                    var c = _rest[0];
                    var d = _rest[1];
                    var e = _rest[2];
                    var f = _rest[3];
                    var g = [c, d];
                    {
                        var i = g[0];
                        var j = g[1];
                        _this = _super.call(this, 2, i, j) || this;
                        _this.d = 0;
                        _this.f = 0;
                        _this.i = null;
                        _this.h = null;
                        _this.c = null;
                        _this.h = "Xml_UserException";
                        _this.c = [i];
                    }
                    _this.d = e;
                    _this.f = f;
                }
                break;
        }
        return _this;
    }
    Object.defineProperty(XmlException.prototype, "lineNumber", {
        get: function () {
            return this.d;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XmlException.prototype, "linePosition", {
        get: function () {
            return this.f;
        },
        enumerable: true,
        configurable: true
    });
    XmlException.$t = markType(XmlException, 'XmlException', BaseError.$);
    return XmlException;
}(BaseError));
export { XmlException };
//# sourceMappingURL=XmlException.js.map