import { BaseDataSource } from "./BaseDataSource";
import { IPageCandidatesSink } from "./IPageCandidatesSink";
import { PagePredictionEngine } from "./PagePredictionEngine";
import { IDataSourceDataProvider } from "./IDataSourceDataProvider";
import { IDataSourceVirtualDataProvider } from "./IDataSourceVirtualDataProvider";
import { IExternalVirtualDataSource } from "./IExternalVirtualDataSource";
import { Type } from "./type";
import { DataSourcePageRequestPriority } from "./DataSourcePageRequestPriority";
import { DataSourceRowType } from "./DataSourceRowType";
export declare class VirtualDataSource extends BaseDataSource implements IPageCandidatesSink {
    static $t: Type;
    constructor();
    private bw;
    protected b6: PagePredictionEngine;
    protected get_actualBaseDataProvider(): IDataSourceDataProvider;
    protected readonly actualBaseDataProvider: IDataSourceDataProvider;
    private bz;
    dataProvider: IDataSourceVirtualDataProvider;
    private by;
    actualDataProvider: IDataSourceVirtualDataProvider;
    private cj;
    pageSizeRequested: number;
    protected resetCache(): void;
    protected resetCacheOverride(): void;
    private ci;
    maxCachedPages: number;
    protected actualPageSizePopulated: boolean;
    private cf;
    actualPageSize: number;
    private ca;
    protected get_isSortingSupported(): boolean;
    protected get_isFilteringSupported(): boolean;
    protected get_isGroupingSupported(): boolean;
    private b3;
    b4: IExternalVirtualDataSource;
    protected resolveDataProvider(): IDataSourceVirtualDataProvider;
    protected propertyUpdatedOverride(a: string, b: any, c: any): void;
    private cm(a);
    private cx(a, b, c);
    private c1(a, b, c);
    protected resolveFullCount(a: number): number;
    private c0();
    private cz(a);
    private cl(a);
    private cy(a);
    protected get_isVirtual(): boolean;
    private b9;
    private ce;
    private cb;
    private bu;
    isPlaceholderItem(a: number): boolean;
    getItemAtIndex(a: number): any;
    private cq(a);
    private bx(a);
    private b8;
    private b7(a);
    getItemPropertyAtIndex(a: number, b: string): any;
    private cr(a, b);
    addCandidate(a: number, b: DataSourcePageRequestPriority): boolean;
    removeCandidate(a: number): void;
    getUnrealizedCount(): number;
    onSetItemOverride(a: number, b: any, c: any): void;
    protected refreshInternalOverride(): void;
    private c2();
    onClearItemsOverride(): void;
    onInsertItemOverride(a: number, b: any): void;
    onRemoveItemOverride(a: number, b: any): void;
    protected get_isItemIndexLookupSupported(): boolean;
    protected get_isKeyIndexLookupSupported(): boolean;
    indexOfItem(a: any): number;
    private cd(a, b);
    indexOfKey(a: any[]): number;
    private b5();
    getStickyRowPriority(a: number): number;
    unpinRow(a: any[]): void;
    pinRow(a: any[]): void;
    isRowPinned(a: number): boolean;
    private bv;
    private ch;
    private cg;
    getStickyRows(): number[];
    isExclusivelySticky(a: number): boolean;
    getRowType(a: number): DataSourceRowType;
}
