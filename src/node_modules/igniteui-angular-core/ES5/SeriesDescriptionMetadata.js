/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { RenderRequestedEventArgsDescriptionMetadata } from "./RenderRequestedEventArgsDescriptionMetadata";
var SeriesDescriptionMetadata = /** @class */ (function (_super) {
    tslib_1.__extends(SeriesDescriptionMetadata, _super);
    function SeriesDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SeriesDescriptionMetadata.b = function (a) {
        if (SeriesDescriptionMetadata.a == null) {
            SeriesDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            SeriesDescriptionMetadata.c(a, SeriesDescriptionMetadata.a);
            RenderRequestedEventArgsDescriptionMetadata.d(a);
        }
    };
    SeriesDescriptionMetadata.c = function (a, b) {
        b.item("LegendItemVisibility", "ExportedType:string:Visibility");
        b.item("LegendItemBadgeTemplate", "DataTemplate");
        b.item("LegendItemTemplate", "DataTemplate");
        b.item("DiscreteLegendItemTemplate", "DataTemplate");
        b.item("TransitionEasingFunctionRef", "(w:TransitionEasingFunction)MethodRef");
        b.item("TransitionInEasingFunctionRef", "(w:TransitionInEasingFunction)MethodRef");
        b.item("TransitionDuration", "Number:int");
        b.item("Resolution", "Number:double");
        b.item("TitleRef", "(w:Title)DataRef");
        b.item("Brush", "Brush");
        b.item("ActualBrush", "Brush");
        b.item("Outline", "Brush");
        b.item("ActualOutline", "Brush");
        b.item("Thickness", "Number:double");
        b.item("IsHighlightingEnabled", "Boolean");
        b.item("IsDropShadowEnabled", "Boolean");
        b.item("ShadowBlur", "Number:double");
        b.item("ShadowColor", "Color");
        b.item("UseSingleShadow", "Boolean");
        b.item("ShadowOffsetX", "Number:double");
        b.item("ShadowOffsetY", "Number:double");
        b.item("AreaFillOpacity", "Number:double");
        b.item("ActualAreaFillOpacity", "Number:double");
        b.item("IsDefaultToolTipSelected", "Boolean");
        b.item("ShowDefaultTooltip", "Boolean");
        b.item("TransitionInDuration", "Number:int");
        b.item("TransitionInSpeedType", "ExportedType:string:TransitionInSpeedType");
        b.item("MouseOverEnabled", "Boolean");
        b.item("CoercionMethodsRef", "(w:CoercionMethods)DataRef");
        b.item("ExpectFunctions", "Boolean");
        b.item("HitTestMode", "ExportedType:string:SeriesHitTestMode");
        b.item("ActualHitTestMode", "ExportedType:string:SeriesHitTestMode");
        b.item("FinalValue", "Number:double");
        b.item("PercentChange", "Number:double");
        b.item("RenderRequestedRef", "EventRef::renderRequested");
        SeriesDescriptionMetadata.e(a, b);
    };
    SeriesDescriptionMetadata.d = function (a) {
        SeriesDescriptionMetadata.b(a);
        a.m("Series", SeriesDescriptionMetadata.a);
    };
    SeriesDescriptionMetadata.e = function (a, b) {
        b.item("DataSourceRef", "(w:ItemsSource)DataRef:String");
    };
    SeriesDescriptionMetadata.$t = markType(SeriesDescriptionMetadata, 'SeriesDescriptionMetadata');
    SeriesDescriptionMetadata.a = null;
    return SeriesDescriptionMetadata;
}(Base));
export { SeriesDescriptionMetadata };
//# sourceMappingURL=SeriesDescriptionMetadata.js.map