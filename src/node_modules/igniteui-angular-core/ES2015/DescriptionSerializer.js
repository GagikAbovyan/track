/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, NotSupportedException, typeCast, typeGetValue, markType } from "./type";
import { TypeDescriptionContext } from "./TypeDescriptionContext";
import { DescriptionTreeNode } from "./DescriptionTreeNode";
import { DescriptionSerializerBuilder } from "./DescriptionSerializerBuilder";
import { DescriptionTreeBuilder } from "./DescriptionTreeBuilder";
import { DescriptionResult } from "./DescriptionResult";
import { JsonDictionaryParser } from "./JsonDictionaryParser";
import { JsonDictionaryObject } from "./JsonDictionaryObject";
import { JsonDictionaryArray } from "./JsonDictionaryArray";
import { NotImplementedException } from "./NotImplementedException";
import { stringReplace } from "./string";
export class DescriptionSerializer extends Base {
    constructor() {
        super();
    }
    f(a, b) {
        let c = DescriptionTreeBuilder.a(a, b);
        let d = new DescriptionSerializerBuilder();
        this.g(a, c, d);
        return d.toString();
    }
    c(a, b) {
        let c = new JsonDictionaryParser();
        let d = c.c(b);
        if (!(typeCast(JsonDictionaryObject.$, d) !== null)) {
            throw new NotSupportedException(1, "expected an object at the root of the json");
        }
        let e = d;
        return this.b(a, e);
    }
    b(a, b, c = 8) {
        if (!b.c("type")) {
            throw new NotSupportedException(1, "expected type to be defined for the json object");
        }
        let d = new DescriptionResult();
        let e = b.item("type").b;
        let f = a.i(e);
        d.result = f;
        if (f == null) {
            d.d("couldn't find registered description for type: " + e);
            return d;
        }
        let g = b.a();
        for (let h = 0; h < g.length; h++) {
            let i = g[h];
            let j = a.b(e, TypeDescriptionContext.l(i));
            if (j == null) {
                continue;
            }
            let k = b.item(i);
            if (typeCast(JsonDictionaryObject.$, k) !== null) {
                let l = k;
                let m = this.b(a, l, j.a);
                d.e(m);
                a.o(f, i, m.result);
            }
            else if (typeCast(JsonDictionaryArray.$, k) !== null) {
                let n = k;
                let o = "string";
                if (j.a == 10) {
                    o = j.k;
                }
                if (j.a == 9) {
                    o = j.f;
                }
                let p = this.a(d, a, n, o);
                a.o(f, i, p);
            }
            else {
                let q = j.k;
                if (q == null) {
                    q = "String";
                }
                let r = k;
                let s = this.d(d, a, r, q);
                a.o(f, i, s);
            }
        }
        return d;
    }
    a(a, b, c, d) {
        let e = new Array(c.a.length);
        for (let f = 0; f < c.a.length; f++) {
            let g = c.a[f];
            if (typeCast(JsonDictionaryObject.$, g) !== null) {
                let h = g;
                let i = this.b(b, h);
                a.e(i);
                e[f] = i.result;
            }
            else if (typeCast(JsonDictionaryArray.$, g) !== null) {
                let j = g;
                let k = this.a(a, b, j, d);
                e[f] = k;
            }
            else {
                let l = g;
                let m = this.d(a, b, l, d);
                e[f] = m;
            }
        }
        return e;
    }
    d(a, b, c, d) {
        switch (c.a) {
            case 1: return c.b;
            case 3: return c.b;
            case 0: switch (d.toLowerCase()) {
                case "int": return typeGetValue(c.b);
                case "double": return c.b;
                case "timespan": return c.b;
                case "short": return typeGetValue(c.b);
                case "long": return typeGetValue(c.b);
                case "float": return c.b;
                case "byte": return typeGetValue(c.b);
                default:
                    a.d("unexpected target type for number: " + d);
                    return c.b;
            }
            case 2:
                if (d.toLowerCase() == "datetime") {
                    let val_ = c.b;
                    let e = (new Date(val_));
                    return e;
                }
                return c.b;
            default:
                a.d("unexpected value type");
                return c.b;
        }
    }
    g(a, b, c) {
        c.f("{");
        c.i();
        c.f("\"type\": \"" + b.h + "\",");
        let d = b.e();
        for (let e = 0; e < d.count; e++) {
            let f = d._inner[e];
            this.h(a, f, c);
        }
        c.h();
        c.f("}");
    }
    e(a) {
        if (a == null) {
            return null;
        }
        return a.substr(0, 1).toLowerCase() + a.substr(1);
    }
    h(a, b, c) {
        if (b.c.toLowerCase() == "type") {
            return;
        }
        c.e("\"" + this.e(b.c) + "\": ");
        this.j(a, b, b.b, c);
        c.f(",");
    }
    j(a, b, c, d) {
        let e = 2;
        if (b.a != null) {
            e = b.a.a;
        }
        switch (e) {
            case 6:
            case 16:
            case 10:
                {
                    d.e("[");
                    let f = b.b;
                    let g = b.a.l;
                    if (b.a.a == 6 || b.a.a == 16) {
                        g = "String";
                    }
                    for (let h = 0; h < f.length; h++) {
                        if (h > 0) {
                            d.e(", ");
                        }
                        let i = g;
                        if (typeCast(DescriptionTreeNode.$, f[h]) !== null) {
                            this.g(a, f[h], d);
                        }
                        else {
                            this.i(a, g, f[h], d);
                        }
                    }
                    d.e("]");
                }
                break;
            case 7:
                this.i(a, "Boolean", c, d);
                break;
            case 9:
                {
                    d.e("[");
                    let j = b.b;
                    let k = b.a.f;
                    for (let l = 0; l < j.length; l++) {
                        if (l > 0) {
                            d.e(", ");
                        }
                        let m = k;
                        if (typeCast(DescriptionTreeNode.$, j[l]) !== null) {
                            this.g(a, j[l], d);
                        }
                        else {
                            this.i(a, k, j[l], d);
                        }
                    }
                    d.e("]");
                }
                break;
            case 4:
            case 18:
            case 19:
            case 20:
            case 5:
            case 2:
                this.i(a, "String", c, d);
                break;
            case 3:
                this.i(a, "DateTime", c, d);
                break;
            case 8:
                if (b.a.k.toLowerCase() == "string") {
                    this.i(a, "String", c, d);
                }
                else {
                    this.g(a, c, d);
                }
                break;
            case 1:
                this.i(a, "Double", c, d);
                break;
            case 14:
            case 12:
            case 11:
                this.g(a, c, d);
                break;
            case 21:
                this.i(a, "TimeSpan", c, d);
                break;
            case 17:
            case 0:
            case 15:
            case 13: throw new NotImplementedException(0);
        }
    }
    i(a, b, c, d) {
        switch (b.toLowerCase()) {
            case "string":
                d.e("\"" + stringReplace(c, "\"", "\\\"") + "\"");
                break;
            case "number":
            case "double":
            case "int":
            case "float":
            case "long":
            case "decimal":
                d.e(c.toString());
                break;
            case "timespan":
                d.e(c.toString());
                break;
            case "datetime":
                let v_ = c;
                d.e("\"" + (v_.toJSON()) + "\"");
                break;
        }
    }
}
DescriptionSerializer.$t = markType(DescriptionSerializer, 'DescriptionSerializer');
//# sourceMappingURL=DescriptionSerializer.js.map