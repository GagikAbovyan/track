import { Base, DomRenderer, DomWrapper, Type, IList$1, INotifyPropertyChanged, Point, PropertyChangedEventArgs, EventArgs } from "./type";
import { ISchedulableRender } from "./ISchedulableRender";
import { Image } from "./Image";
import { RenderingContext } from "./RenderingContext";
import { Tile } from "./Tile";
import { Rect } from "./Rect";
import { CanvasRenderScheduler } from "./CanvasRenderScheduler";
import { StackPool$1 } from "./StackPool$1";
import { WriteableBitmap } from "./WriteableBitmap";
import { Uri } from "./Uri";
import { DownloadingMultiScaleImageEventArgs } from "./DownloadingMultiScaleImageEventArgs";
import { IMapRenderDeferralHandler } from "./IMapRenderDeferralHandler";
import { DependencyObject } from "./DependencyObject";
import { Control } from "./Control";
import { IEasingFunction } from "./IEasingFunction";
export declare class XamMultiScaleImageView extends Base implements ISchedulableRender {
    static $t: Type;
    protected b: XamMultiScaleImage;
    constructor(a: XamMultiScaleImage);
    private h;
    private at();
    private y(a);
    private aa(a);
    private z(a);
    ao(a: Image, b: number, c: number): void;
    r(a: Tile): void;
    u(a: Tile): void;
    private g;
    private q();
    private ab(a, b);
    private ac(a, b);
    private j;
    private readonly i;
    private downloadError(a, b);
    private downloadCompleted(a, b);
    a(a: number, b: WriteableBitmap, c: number, d: number): WriteableBitmap;
    am(a: Image): void;
    an(a: Image): void;
    f(): boolean;
    s(a: (arg1: boolean) => void): void;
    private p;
    private o;
    aq(): void;
    as(): void;
    ap(): void;
    ar(): void;
    t(): void;
    protected k: DomRenderer;
    protected m: DomWrapper;
    protected c: RenderingContext;
    ae(a: any): void;
    private af(a, b);
    aj(): void;
    readonly index: number;
    postRender(): void;
    private _isDirty;
    isDirty: boolean;
    ad(): void;
    undirty(a: boolean): void;
    protected au: Rect;
    private ak();
    d(): boolean;
    private al(a);
    private e(a);
    x(): void;
    ag(a: RenderingContext): void;
    private l;
    ah(a: DomRenderer): void;
    ai(a: Rect): void;
    preRender(): void;
    isValid(): boolean;
}
export declare abstract class XamMultiScaleTileSource extends DependencyObject {
    static $t: Type;
    constructor(a: number, b: number, c: number, d: number, e: number);
    private o;
    q: number;
    private n;
    p: number;
    m: number;
    k: number;
    l: number;
    j: XamMultiScaleImage;
    r(a: number, b: number, c: number): Uri;
    protected abstract s(a: number, b: number, c: number, d: IList$1<any>): void;
    protected t(a: number, b: number, c: number, d: number): void;
}
export declare class XamMultiScaleImage extends Control implements INotifyPropertyChanged {
    static $t: Type;
    constructor();
    ao: StackPool$1<Image>;
    am: XamMultiScaleImageView;
    private aj;
    ak: IMapRenderDeferralHandler;
    an: XamMultiScaleTileSource;
    b8: Point;
    b6: Point;
    a2: number;
    az: number;
    au: boolean;
    ai: IEasingFunction;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    protected bm(a: PropertyChangedEventArgs): void;
    private a7;
    private a8;
    private bw();
    bi(a: number, b: number, c: number, d: number): void;
    private ax;
    private b7;
    private a0;
    private bx();
    by(): void;
    private av;
    private a5(a, b, c);
    bv(a: boolean): void;
    private at;
    bu(): void;
    private b0();
    private bt();
    private al(a);
    be(a: Tile, b: WriteableBitmap): void;
    private ap;
    private aq;
    private readonly aw;
    as(): boolean;
    imageTilesReady: (sender: any, e: EventArgs) => void;
    private ar;
    bj(): void;
    bz(a: Tile): void;
    private bf(a);
    bh(): void;
    b9: Rect;
    bn(): void;
    bp(a: any): void;
    bq(a: RenderingContext): void;
    br(a: DomRenderer): void;
    bs(a: Rect): void;
    ag: CanvasRenderScheduler;
    bl(): void;
    imagesChanged: (sender: any, e: EventArgs) => void;
    bg(): void;
    downloadingImage: (sender: any, args: DownloadingMultiScaleImageEventArgs) => void;
    bk(a: DownloadingMultiScaleImageEventArgs): void;
    private ay;
    readonly a1: number;
    bo(a: number): void;
    a6: number;
    static $$p: string[];
}
