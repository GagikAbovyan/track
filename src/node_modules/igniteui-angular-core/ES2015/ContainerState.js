/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, Number_$type, String_$type, fromEnum, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { DescriptionRef } from "./DescriptionRef";
import { List$1 } from "./List$1";
export class ContainerState extends Base {
    constructor() {
        super(...arguments);
        this.l = null;
        this.f = new Dictionary$2(Number_$type, Base.$, 0);
        this.g = new Dictionary$2(Base.$, Number_$type, 0);
        this.e = new Dictionary$2(Number_$type, String_$type, 0);
        this.h = new Dictionary$2(String_$type, DescriptionRef.$, 0);
        this.i = new Dictionary$2(String_$type, Base.$, 0);
        this.j = new Dictionary$2(String_$type, Base.$, 0);
    }
    o(a, b, c) {
        if (c.b("Name")) {
            this.e.item(a, c.a("Name").b);
            this.q(this.e.item(a), b, false);
        }
        this.f.item(a, b);
        this.g.item(b, a);
    }
    m(a) {
        return this.f.item(a);
    }
    r(a) {
        let b = this.f.item(a);
        this.g.removeItem(b);
        this.f.removeItem(a);
        if (this.e.containsKey(a)) {
            let c = this.e.item(a);
            this.e.removeItem(a);
            this.s(c, false);
        }
    }
    a(a) {
        if (this.h.containsKey(a)) {
            let b = this.h.item(a);
            return b;
        }
        let c = new DescriptionRef(a);
        this.h.addItem(a, c);
        return c;
    }
    k(a) {
        if (this.g.containsKey(a)) {
            return this.g.item(a);
        }
        return -1;
    }
    q(a, b, c) {
        let d = null;
        if (c) {
            if (this.j.containsKey(a)) {
                d = this.j.item(a);
            }
            this.j.item(a, b);
        }
        else {
            if (this.i.containsKey(a)) {
                d = this.i.item(a);
            }
            this.i.item(a, b);
        }
        if (this.h.containsKey(a)) {
            this.h.item(a).e(d, b);
        }
    }
    s(a, b) {
        let c = null;
        if (b) {
            if (this.j.containsKey(a)) {
                c = this.j.item(a);
            }
            this.j.removeItem(a);
        }
        else {
            if (this.i.containsKey(a)) {
                c = this.i.item(a);
            }
            this.i.removeItem(a);
        }
        if (this.h.containsKey(a)) {
            this.h.item(a).e(c, this.n(this.h.item(a)));
            if (this.h.item(a).b <= 0) {
                this.h.removeItem(a);
            }
        }
    }
    p() {
        let a = new List$1(String_$type, 0);
        for (let b of fromEnum(this.j.keys)) {
            a.add(b);
        }
        for (let c of fromEnum(a)) {
            this.s(c, true);
        }
    }
    d(a) {
        return this.j.containsKey(a.d) || this.i.containsKey(a.d);
    }
    n(a) {
        if (this.j.containsKey(a.d)) {
            return this.j.item(a.d);
        }
        if (this.i.containsKey(a.d)) {
            return this.i.item(a.d);
        }
        return null;
    }
    c(a) {
        return this.h.containsKey(a);
    }
    b(a) {
        return this.h.item(a);
    }
}
ContainerState.$t = markType(ContainerState, 'ContainerState');
//# sourceMappingURL=ContainerState.js.map