import { Base, DomRenderer, DomWrapper, Point, Type, INotifyPropertyChanged, PropertyChangedEventArgs } from "./type";
import { CanvasGestureDOMEventProxy } from "./CanvasGestureDOMEventProxy";
import { Brush } from "./Brush";
import { Key } from "./Key";
import { ScrollerScrollingEventArgs } from "./ScrollerScrollingEventArgs";
export declare class ScrollerView extends Base {
    static $t: Type;
    constructor(a: Scroller);
    b: Scroller;
    protected x: DomRenderer;
    protected ab: DomWrapper;
    ay(): Brush;
    protected w: HTMLDivElement;
    protected a: CanvasGestureDOMEventProxy;
    aa: DomWrapper;
    y: DomWrapper;
    z: DomWrapper;
    ac: DomWrapper;
    ar(a: any): void;
    private j(a);
    private n(a, b, c);
    private ae(a, b);
    private af(a, b);
    private ag(a, b);
    private l(a, b);
    private m(a, b);
    private d;
    private i(a, b, c);
    ap(a: number): void;
    aq(a: number): void;
    an(a: number): void;
    ao(a: number): void;
    ad(): void;
    private ah(a);
    private ai(a);
    aw(a: number): void;
    private aj(a);
    u(): number;
    v(): number;
    private k(a, b);
    av(a: number): void;
    as(a: any): void;
    private c;
    at(a: () => void): void;
    private h;
    private g;
    private s;
    private p;
    private t;
    private q;
    private f;
    private e;
    private r;
    private o;
    am(): void;
    al(): void;
    ax(a: number, b: number): void;
    au(a: number, b: number): void;
    ak(): void;
}
export declare class Scroller extends Base implements INotifyPropertyChanged {
    static $t: Type;
    constructor();
    private am;
    smallVerticalChange: number;
    private ae;
    largeVerticalChange: number;
    private z;
    au: number;
    private x;
    as: number;
    private al;
    smallHorizontalChange: number;
    private ad;
    largeHorizontalChange: number;
    private y;
    at: number;
    private w;
    ar: number;
    private ac;
    contentWidth: number;
    private af;
    minScrollbarSize: number;
    private ai;
    scrollbarSpan: number;
    n(a: Key): boolean;
    private s();
    private o();
    private t();
    private m();
    private r();
    private q();
    private an;
    verticalTrackStartInset: number;
    private cb;
    scrollbarBrush: Brush;
    private by(a, b, c);
    private j;
    private u;
    protected b1(a: string, b: any, c: any): void;
    private ab;
    contentHeight: number;
    bz(a: number): void;
    bx(a: number): void;
    b0(a: number, b: number): void;
    private ap;
    viewportWidth: number;
    private ao;
    viewportHeight: number;
    private ak;
    scrollTop: number;
    private aj;
    scrollLeft: number;
    private b;
    readonly view: ScrollerView;
    provideContainer(a: any): void;
    provideContent(a: any): void;
    p(a: Point, b: number): boolean;
    private h;
    lockScrollDirection: boolean;
    k: boolean;
    private aa;
    actualVerticalScrollbarHeight: number;
    private v;
    actualHorizontalScrollbarWidth: number;
    private g;
    private e;
    private f;
    private cd;
    private d;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    focus(): void;
    bw(a: Point): void;
    bv(a: Point): void;
    onScrolling: (sender: any, args: ScrollerScrollingEventArgs) => void;
    scrollTo(a: number, b: number): void;
    private ag;
    private ah;
    private b5(a, b);
    private i;
    private b4();
    private b7();
    private ca();
    private b8();
    private b9(a, b, c, d);
    bu(a: Point): void;
}
