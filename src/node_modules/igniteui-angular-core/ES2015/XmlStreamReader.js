import { NonBlockingStreamReader } from "./NonBlockingStreamReader";
import { XmlInputStream } from "./XmlInputStream";
import { markType } from "./type";
import { XmlException } from "./XmlException";
export class XmlStreamReader extends NonBlockingStreamReader {
    constructor(a, ..._rest) {
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    let c = _rest[0];
                    super(c, c.actualEncoding != null ? c.actualEncoding : XmlInputStream.strictUTF8);
                    this.ae = null;
                    this.ae = c;
                }
                break;
            case 1:
                {
                    let c = _rest[0];
                    let d = [new XmlInputStream(c)];
                    {
                        let f = d[0];
                        super(f, f.actualEncoding != null ? f.actualEncoding : XmlInputStream.strictUTF8);
                        this.ae = null;
                        this.ae = f;
                    }
                }
                break;
        }
    }
    i() {
        this.ae.close();
    }
    c(a, b, c) {
        try {
            return super.c(a, b, c);
        }
        catch (d) {
            throw new XmlException(3, "invalid data.");
        }
    }
    dispose1(a) {
        super.dispose1(a);
        if (a) {
            this.i();
        }
    }
}
XmlStreamReader.$t = markType(XmlStreamReader, 'XmlStreamReader', NonBlockingStreamReader.$);
XmlStreamReader.ad = new XmlException(3, "invalid data.");
//# sourceMappingURL=XmlStreamReader.js.map