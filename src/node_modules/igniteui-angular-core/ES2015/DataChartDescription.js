/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { SeriesViewerDescription } from "./SeriesViewerDescription";
import { markType } from "./type";
export class DataChartDescription extends SeriesViewerDescription {
    constructor() {
        super();
        this.dj = false;
        this.dw = 0;
        this.dx = 0;
        this.dq = 0;
        this.dr = 0;
        this.di = false;
        this.dk = false;
        this.d9 = null;
        this.dh = false;
        this.c8 = null;
        this.c9 = null;
        this.db = null;
        this.da = null;
        this.d8 = null;
        this.d6 = null;
        this.d7 = null;
        this.dt = 0;
        this.dv = 0;
        this.du = 0;
        this.ds = 0;
        this.c7 = null;
        this.eb = null;
        this.ea = null;
    }
    get_type() {
        return "DataChart";
    }
    get isSquare() {
        return this.dj;
    }
    set isSquare(a) {
        this.dj = a;
        this.e("IsSquare");
    }
    get windowScaleHorizontal() {
        return this.dw;
    }
    set windowScaleHorizontal(a) {
        this.dw = a;
        this.e("WindowScaleHorizontal");
    }
    get windowScaleVertical() {
        return this.dx;
    }
    set windowScaleVertical(a) {
        this.dx = a;
        this.e("WindowScaleVertical");
    }
    get actualWindowScaleHorizontal() {
        return this.dq;
    }
    set actualWindowScaleHorizontal(a) {
        this.dq = a;
        this.e("ActualWindowScaleHorizontal");
    }
    get actualWindowScaleVertical() {
        return this.dr;
    }
    set actualWindowScaleVertical(a) {
        this.dr = a;
        this.e("ActualWindowScaleVertical");
    }
    get isHorizontalZoomEnabled() {
        return this.di;
    }
    set isHorizontalZoomEnabled(a) {
        this.di = a;
        this.e("IsHorizontalZoomEnabled");
    }
    get isVerticalZoomEnabled() {
        return this.dk;
    }
    set isVerticalZoomEnabled(a) {
        this.dk = a;
        this.e("IsVerticalZoomEnabled");
    }
    get gridMode() {
        return this.d9;
    }
    set gridMode(a) {
        this.d9 = a;
        this.e("GridMode");
    }
    get alignsGridLinesToPixels() {
        return this.dh;
    }
    set alignsGridLinesToPixels(a) {
        this.dh = a;
        this.e("AlignsGridLinesToPixels");
    }
    get brushes() {
        return this.c8;
    }
    set brushes(a) {
        this.c8 = a;
        this.e("Brushes");
    }
    get markerBrushes() {
        return this.c9;
    }
    set markerBrushes(a) {
        this.c9 = a;
        this.e("MarkerBrushes");
    }
    get outlines() {
        return this.db;
    }
    set outlines(a) {
        this.db = a;
        this.e("Outlines");
    }
    get markerOutlines() {
        return this.da;
    }
    set markerOutlines(a) {
        this.da = a;
        this.e("MarkerOutlines");
    }
    get defaultAxisStroke() {
        return this.d8;
    }
    set defaultAxisStroke(a) {
        this.d8 = a;
        this.e("DefaultAxisStroke");
    }
    get defaultAxisMajorStroke() {
        return this.d6;
    }
    set defaultAxisMajorStroke(a) {
        this.d6 = a;
        this.e("DefaultAxisMajorStroke");
    }
    get defaultAxisMinorStroke() {
        return this.d7;
    }
    set defaultAxisMinorStroke(a) {
        this.d7 = a;
        this.e("DefaultAxisMinorStroke");
    }
    get plotAreaMarginLeft() {
        return this.dt;
    }
    set plotAreaMarginLeft(a) {
        this.dt = a;
        this.e("PlotAreaMarginLeft");
    }
    get plotAreaMarginTop() {
        return this.dv;
    }
    set plotAreaMarginTop(a) {
        this.dv = a;
        this.e("PlotAreaMarginTop");
    }
    get plotAreaMarginRight() {
        return this.du;
    }
    set plotAreaMarginRight(a) {
        this.du = a;
        this.e("PlotAreaMarginRight");
    }
    get plotAreaMarginBottom() {
        return this.ds;
    }
    set plotAreaMarginBottom(a) {
        this.ds = a;
        this.e("PlotAreaMarginBottom");
    }
    get axes() {
        return this.c7;
    }
    set axes(a) {
        this.c7 = a;
        this.e("Axes");
    }
    get width() {
        return this.eb;
    }
    set width(a) {
        this.eb = a;
        this.e("Width");
    }
    get height() {
        return this.ea;
    }
    set height(a) {
        this.ea = a;
        this.e("Height");
    }
}
DataChartDescription.$t = markType(DataChartDescription, 'DataChartDescription', SeriesViewerDescription.$);
//# sourceMappingURL=DataChartDescription.js.map