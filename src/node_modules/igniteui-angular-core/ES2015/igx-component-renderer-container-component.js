/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Injector, ComponentFactoryResolver, Component, Renderer2, ViewChild, Inject, NgZone, ChangeDetectionStrategy, ViewContainerRef } from '@angular/core';
import { DOCUMENT } from '@angular/platform-browser';
export class IgxComponentRendererContainerComponent {
    constructor(_renderer, _document, _elRef, _ngZone, _componentFactoryResolver, _injector) {
        this._renderer = _renderer;
        this._document = _document;
        this._elRef = _elRef;
        this._ngZone = _ngZone;
        this._componentFactoryResolver = _componentFactoryResolver;
        this._injector = _injector;
        this.listeners = [];
        this._currentRoot = null;
        this._currentRootRef = null;
    }
    replaceRootItem(t, continueActions) {
        if (this._currentRoot != null) {
            this._currentRoot;
        }
        let cf = this._componentFactoryResolver.resolveComponentFactory(t);
        let cr = this._dynamicContent.createComponent(cf);
        this._currentRootRef = cr;
        this._currentRoot = cr.instance;
    }
    clearContainer(continueActions) {
        if (this._currentRootRef) {
            this._currentRootRef.destroy();
            this._currentRootRef = null;
            this._currentRoot = null;
        }
    }
    getRootObject() {
        return this._currentRoot;
    }
}
IgxComponentRendererContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-component-renderer-container',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <ng-container #dynamicContent></ng-container>
  `,
                styles: [`
  :host {
    display: block;
  }`]
            },] },
];
/** @nocollapse */
IgxComponentRendererContainerComponent.ctorParameters = () => [
    { type: Renderer2, },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
    { type: ViewContainerRef, },
    { type: NgZone, },
    { type: ComponentFactoryResolver, },
    { type: Injector, },
];
IgxComponentRendererContainerComponent.propDecorators = {
    "_dynamicContent": [{ type: ViewChild, args: ["dynamicContent", { read: ViewContainerRef },] },],
};
//# sourceMappingURL=igx-component-renderer-container-component.js.map