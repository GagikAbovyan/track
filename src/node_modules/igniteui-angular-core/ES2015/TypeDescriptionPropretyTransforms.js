/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, Delegate_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
export class TypeDescriptionPropretyTransforms extends Base {
    constructor() {
        super();
        this.a = new Dictionary$2(Base.$, Delegate_$type, 0);
    }
    b(a, b, c) {
        if (c == null) {
            return b;
        }
        let d = c.h(a);
        if (d != null && this.a.containsKey(d)) {
            let e = this.a.item(d);
            return e(b, c);
        }
        return b;
    }
}
TypeDescriptionPropretyTransforms.$t = markType(TypeDescriptionPropretyTransforms, 'TypeDescriptionPropretyTransforms');
//# sourceMappingURL=TypeDescriptionPropretyTransforms.js.map