import { EventProxy } from "./EventProxy";
import { DomWrapper, DomRenderer, Point, NormalizedEvent, Type } from "./type";
import { Rect } from "./Rect";
import { Key } from "./Key";
import { List$1 } from "./List$1";
export declare abstract class BaseDOMEventProxy extends EventProxy {
    static $t: Type;
    protected bt: DomWrapper;
    d(): EventProxy;
    static readonly bn: boolean;
    protected bm: boolean;
    bb(a: DomWrapper): Rect;
    protected bs: DomRenderer;
    protected cj(a: NormalizedEvent): void;
    private bh(e_);
    static bj: boolean;
    static bk: boolean;
    private bf;
    protected cf(): void;
    protected static ci(source_: any): void;
    protected static cc(source_: any): void;
    protected cd(): void;
    protected ao(): void;
    static b1: number;
    static by: number;
    protected b0(): number;
    protected bz(): number;
    static ch(e_: NormalizedEvent): void;
    static ct(a: DomWrapper): Rect;
    private bq;
    private br;
    private bo;
    private bp;
    private bu;
    protected cs: Point;
    protected cr: Point;
    protected bx: number;
    protected cm(a: NormalizedEvent): void;
    protected cn(e_: NormalizedEvent): void;
    protected cb(e_: NormalizedEvent): void;
    protected b9(e_: NormalizedEvent): void;
    private be;
    private bv;
    protected cg(): void;
    protected b2(): void;
    protected ce(): void;
    protected bi: boolean;
    private bg;
    protected bl: boolean;
    protected b7(a: NormalizedEvent): void;
    protected b8(a: NormalizedEvent): void;
    protected ck(a: NormalizedEvent): void;
    private bd;
    protected b6(a: NormalizedEvent): void;
    protected co(a: NormalizedEvent): void;
    protected ca(a: NormalizedEvent): void;
    protected b3(a: NormalizedEvent): void;
    protected b5(a: NormalizedEvent): void;
    protected cq(a: NormalizedEvent): Key;
    static cp(a: NormalizedEvent): Key;
    protected b4(a: NormalizedEvent, b: boolean): void;
    protected cl(a: NormalizedEvent): void;
    ba(): Point;
}
export declare class DOMEventProxy extends BaseDOMEventProxy {
    static $t: Type;
    private static c4;
    private c5;
    private c6;
    private cv;
    c2: MSGesture;
    constructor(a: DomWrapper, b: DomRenderer, c: boolean);
    private cy;
    c7(a: any, b: string, c: List$1<() => void>): void;
    am(a: any, b: string): void;
    private dg(e_);
    private db(e_);
    private dc(e_);
    private dd(e_);
    protected cw(e_: NormalizedEvent): boolean;
    private de(e_);
    private df(e_);
    private da(e_);
    private c8(e_);
    private c9(e_);
    private dt;
    private dj(e_);
    private c3;
    private du;
    private c0;
    private c1;
    private cz;
    private dp();
    private dl();
    private dq();
    dm(): void;
    private cu;
    private ds;
    private di(a);
    private cx();
    private dh(a);
    private dn(a);
    private dr();
    private dk(a);
    a8(a: any, b: string): void;
    an(): void;
}
