/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, Boolean_$type, typeCast, delegateCombine, markType } from "./type";
import { TypeDescriptionContext } from "./TypeDescriptionContext";
import { TypeDescriptionPropretyTransforms } from "./TypeDescriptionPropretyTransforms";
import { Dictionary$2 } from "./Dictionary$2";
import { Description } from "./Description";
import { DescriptionTreeNode } from "./DescriptionTreeNode";
import { ContainerState } from "./ContainerState";
import { Queue$1 } from "./Queue$1";
import { DescriptionTreeAction } from "./DescriptionTreeAction";
import { List$1 } from "./List$1";
import { DescriptionTreeBuilder } from "./DescriptionTreeBuilder";
import { DescriptionTreeReconciler } from "./DescriptionTreeReconciler";
import { NotImplementedException } from "./NotImplementedException";
import { DescriptionRef } from "./DescriptionRef";
import { ComponentRendererAdapter } from "./ComponentRendererAdapter";
export class ComponentRenderer extends Base {
    constructor() {
        super();
        this.b = null;
        this._context = null;
        this.f = null;
        this.z = new Dictionary$2(Base.$, Description.$, 0);
        this.y = new Dictionary$2(Base.$, DescriptionTreeNode.$, 0);
        this.ab = new Dictionary$2(Base.$, ContainerState.$, 0);
        this.aa = new Dictionary$2(Base.$, Queue$1.$.specialize(Queue$1.$.specialize(DescriptionTreeAction.$)), 0);
        this.x = new Dictionary$2(Base.$, Boolean_$type, 0);
        let a = this.c();
        this.b = a;
        this.context = new TypeDescriptionContext(a, ComponentRenderer.platform);
        this.f = new TypeDescriptionPropretyTransforms();
    }
    get context() {
        return this._context;
    }
    set context(a) {
        this._context = a;
    }
    c() {
        return (new ComponentRendererAdapter());
    }
    render(a, b) {
        if (!this.ab.containsKey(b)) {
            this.ab.item(b, new ContainerState());
            this.ab.item(b).l = b;
        }
        this.z.item(b, a);
        this.bb(b, () => this.bi(b));
    }
    bb(a, b) {
        this.b.onUIThread(a, b);
    }
    bi(a) {
        if (this.z.containsKey(a)) {
            let b = this.z.item(a);
            this.z.removeItem(a);
            let c = DescriptionTreeBuilder.a(this.context, b);
            let d = null;
            if (this.y.containsKey(a)) {
                d = this.y.item(a);
            }
            let e = DescriptionTreeReconciler.b(d, c);
            this.y.item(a, c);
            this.bj(a, e);
        }
    }
    provideRefValue(a, b, c) {
        this.bb(a, () => {
            if (!this.ab.containsKey(a)) {
                this.ab.addItem(a, ((() => {
                    let $ret = new ContainerState();
                    $ret.l = a;
                    return $ret;
                })()));
            }
            let d = this.ab.item(a);
            d.q(b, c, true);
        });
    }
    removeRefValue(a, b) {
        this.bb(a, () => {
            if (!this.ab.containsKey(a)) {
                this.ab.addItem(a, ((() => {
                    let $ret = new ContainerState();
                    $ret.l = a;
                    return $ret;
                })()));
            }
            let c = this.ab.item(a);
            c.s(b, true);
        });
    }
    clearRefValues(a) {
        this.bb(a, () => {
            if (!this.ab.containsKey(a)) {
                this.ab.addItem(a, ((() => {
                    let $ret = new ContainerState();
                    $ret.l = a;
                    return $ret;
                })()));
            }
            let b = this.ab.item(a);
            b.p();
        });
    }
    bj(a, b) {
        let c = this.ab.item(a);
        this.bc(a, c, b);
    }
    bl(a, b) {
        this.a9(a, b, true);
    }
    bo(a, b) {
        this.a9(a, b, false);
    }
    a9(a, b, c) {
        if (!c) {
            if (this.x.containsKey(a) && this.x.item(a)) {
                return;
            }
        }
        this.x.item(a, true);
        let d = true;
        while (d && this.aa.item(a).count > 0) {
            while (this.aa.item(a).count > 0 && this.aa.item(a).c().count < 1) {
                this.aa.item(a).b();
            }
            if (this.aa.item(a).count < 1) {
                break;
            }
            let e = this.aa.item(a).c();
            while (e.count > 0) {
                let f = e.b();
                d = this.l(a, b, f);
                if (!d) {
                    break;
                }
            }
        }
        if (d) {
            this.x.item(a, false);
        }
    }
    bc(a, b, c) {
        let d = new Queue$1(DescriptionTreeAction.$);
        for (let e = 0; e < c.count; e++) {
            d.g(c._inner[e]);
        }
        if (!this.aa.containsKey(a)) {
            this.aa.addItem(a, new Queue$1(Queue$1.$.specialize(DescriptionTreeAction.$)));
        }
        this.aa.item(a).g(d);
        this.bo(a, b);
    }
    bd(a, b, c) {
        for (let d = 0; d < c.count; d++) {
            this.l(a, b, c._inner[d]);
        }
    }
    l(a, b, c) {
        switch (c.a) {
            case 5: return this.m(a, b, c);
            case 2: return this.n(a, b, c);
            case 4: return this.o(a, b, c);
            case 3: return this.p(a, b, c);
            case 1: return this.q(a, b, c);
            case 0: return this.r(a, b, c);
        }
        return true;
    }
    r(a, b, c) {
        let d = this.ay(a, b, c);
        this.w(a, b, c, d);
        return true;
    }
    w(a, b, c, d) {
        let e = this.av(c, a, b);
        e = this.f.b(ComponentRenderer.platform, e, c.c);
        if (c.c != null && c.c.a == 9) {
            this.v(a, b, c.h(ComponentRenderer.platform), c.c, e, d);
        }
        else {
            this.bm(a, b, c.h(ComponentRenderer.platform), e, c.g, d);
        }
        return true;
    }
    v(a, b, c, d, e, f) {
        this.b.setOrUpdateCollectionOnTarget(a, c, d, this.context, f, e);
        return true;
    }
    av(a, b, c) {
        if (a.c == null) {
            return a.f;
        }
        switch (a.c.a) {
            case 10: return this.ae(a, b, c);
            case 7: return this.af(a);
            case 4: return this.ag(a);
            case 6: return this.ah(a);
            case 9: return this.ae(a, b, c);
            case 5: return this.ai(a);
            case 16: return this.aj(a);
            case 20: return this.az(a, c);
            case 15: return null;
            case 3: return this.ak(a);
            case 19: return this.a0(a, c);
            case 8: return this.am(a, b, c);
            case 13: return null;
            case 18: return this.a1(a, c);
            case 1: return this.an(a);
            case 11: return this.ao(a);
            case 14: return this.ap(a);
            case 12: return this.aq(a);
            case 2: return this.ar(a);
            case 21: return this.as(a);
            case 17: return this.at(a);
            case 0: return null;
        }
        return null;
    }
    at(a) {
        throw new NotImplementedException(0);
    }
    as(a) {
        return a.f;
    }
    ar(a) {
        return a.f != null ? a.f.toString() : null;
    }
    aq(a) {
        let b = a.f;
        let width_ = b.width;
        let height_ = b.height;
        let c = { width: width_, height: height_ };
        return c;
    }
    ap(a) {
        let b = a.f;
        let top_ = b.top;
        let left_ = b.left;
        let width_ = b.width;
        let height_ = b.height;
        let c = { left: left_, top: top_, width: width_, height: height_ };
        return c;
    }
    ao(a) {
        let b = a.f;
        let x_ = b.x;
        let y_ = b.y;
        let c = { x: x_, y: y_ };
        return c;
    }
    an(a) {
        return a.f;
    }
    a1(a, b) {
        return a.f == null ? null : b.a(a.f);
    }
    am(a, b, c) {
        let d = this.au(a.c.l, a.f, b, c);
        return d;
    }
    a0(a, b) {
        return a.f == null ? null : b.a(a.f);
    }
    ak(a) {
        return a.f;
    }
    az(a, b) {
        return a.f == null ? null : b.a(a.f);
    }
    a3(a) {
        return a;
    }
    aj(a) {
        let b = a.f;
        if (b == null) {
            return null;
        }
        let c = new Array(b.length);
        for (let d = 0; d < b.length; d++) {
            c[d] = this.a3(b[d]);
        }
        return c;
    }
    ai(a) {
        return this.a3(a.f);
    }
    ah(a) {
        let b = a.f;
        if (b == null) {
            return null;
        }
        let c = new Array(b.length);
        for (let d = 0; d < b.length; d++) {
            c[d] = this.a2(b[d]);
        }
        return c;
    }
    a2(a) {
        return a;
    }
    ag(a) {
        return this.a2(a.f);
    }
    af(a) {
        return a.f;
    }
    ae(a, b, c) {
        if (a.f == null) {
            return null;
        }
        let d = a.f;
        let e = new List$1(Base.$, 0);
        let f = a.c.l;
        if (a.c.a == 9) {
            f = a.c.f;
        }
        for (let g = 0; g < d.length; g++) {
            let h = f;
            if (typeCast(DescriptionTreeNode.$, d[g]) !== null) {
                let i = d[g];
                if (i.b("Type")) {
                    h = i.a("Type").b;
                }
            }
            let j = this.au(h, d[g], b, c);
            e.add1(j);
        }
        return e.toArray();
    }
    bm(a, b, c, d, e, f) {
        if (typeCast(DescriptionRef.$, d) !== null) {
            let g = false;
            if (e != null && typeof e === 'string') {
                if (this.j(b, e)) {
                    let h = this.a(b, e);
                    if (Base.equalsStatic(h, d)) {
                        g = true;
                    }
                    if (!g) {
                        this.a7(b, h);
                    }
                }
            }
            if (!g) {
                this.ba(b, d);
            }
            if (this.k(b, d)) {
                d = this.ax(b, d);
                this.bn(f, c, d);
            }
            else {
                let i = null;
                i = (j, k) => {
                    let l = this.ax(b, j);
                    this.bn(f, c, l);
                };
                let j = d;
                j.valueChanged = delegateCombine(j.valueChanged, i);
            }
            return;
        }
        this.bn(f, c, d);
    }
    ba(a, b) {
        b.b++;
    }
    a7(a, b) {
        b.b--;
    }
    k(a, b) {
        return a.d(b);
    }
    j(a, b) {
        return a.c(b);
    }
    a(a, b) {
        return a.b(b);
    }
    ax(a, b) {
        return a.n(b);
    }
    ay(a, b, c) {
        return b.m(c.b.f);
    }
    q(a, b, c) {
        let d = this.ay(a, b, c);
        this.u(a, b, c, d);
        return true;
    }
    u(a, b, c, d) {
        this.b.resetPropertyOnTarget(a, c.h(ComponentRenderer.platform), c.c, d);
        return true;
    }
    p(a, b, c) {
        if (c.b == null) {
            return this.t(a, b, c);
        }
        else {
            let d = this.ay(a, b, c);
            this.bk(a, b, c, d);
        }
        return true;
    }
    bk(a, b, c, d) {
        let e = c.h(ComponentRenderer.platform);
        let f = this.au(c.c.f, c.f, a, b);
        this.b.replaceItemInCollection(e, c.c, d, c.d, f);
    }
    t(a, b, c) {
        let d = this.b.getRootObject(a);
        if (d != null) {
            this.a8(a, d, b);
        }
        if (!(typeCast(DescriptionTreeNode.$, c.f) !== null)) {
            throw new NotImplementedException(0);
        }
        let e = c.f;
        let f = false;
        this.b.replaceRootItem(a, e.h, this.context, (g) => {
            let h = this.b.getRootObject(a);
            b.o(e.f, h, e);
            let i = this.ac(e);
            this.bd(a, b, i);
            f = true;
            if (g) {
                this.bl(a, b);
            }
        });
        return f;
    }
    a8(a, b, c) {
        let d = this.ad(a, b, c);
        if (d != -1) {
            c.r(d);
        }
    }
    ad(a, b, c) {
        return c.k(b);
    }
    o(a, b, c) {
        if (c.b == null) {
            return this.s(a, b, c);
        }
        else {
            let d = this.ay(a, b, c);
            this.bf(a, b, c, d);
        }
        return true;
    }
    bf(a, b, c, d) {
        let e = c.h(ComponentRenderer.platform);
        this.b.removeItemFromCollection(e, c.c, d, c.e);
    }
    s(a, b, c) {
        let d = this.b.getRootObject(a);
        if (d != null) {
            this.a8(a, d, b);
        }
        let e = false;
        this.b.removeRootItem(a, this.context, (f) => {
            e = true;
            if (f) {
                this.bl(a, b);
            }
        });
        return e;
    }
    n(a, b, c) {
        if (c.b == null) {
            return this.g(a, b, c);
        }
        else {
            let d = this.ay(a, b, c);
            this.a4(a, b, c, d);
        }
        return true;
    }
    g(a, b, c) {
        if (!(typeCast(DescriptionTreeNode.$, c.f) !== null)) {
            throw new NotImplementedException(0);
        }
        let d = c.f;
        let e = false;
        this.b.replaceRootItem(a, d.h, this.context, (f) => {
            let g = this.b.getRootObject(a);
            b.o(d.f, g, d);
            let h = this.ac(d);
            this.bd(a, b, h);
            e = true;
            if (f) {
                this.bl(a, b);
            }
        });
        return e;
    }
    a4(a, b, c, d) {
        let e = c.h(ComponentRenderer.platform);
        let f = c.c.f;
        if (typeCast(DescriptionTreeNode.$, c.f) !== null) {
            let g = c.f;
            if (g.b("Type")) {
                f = g.a("Type").b;
            }
        }
        let h = this.au(f, c.f, a, b);
        this.b.addItemToCollection(e, c.c, d, c.d, h);
    }
    au(a, b, c, d) {
        let e = this.context.j(a, c);
        if (b == null) {
            return e;
        }
        if (typeCast(DescriptionTreeNode.$, b) !== null) {
            let f = b;
            d.o(f.f, e, f);
            let g = this.ac(f);
            this.bd(c, d, g);
        }
        if (typeof b === 'string' && a.toLowerCase() != "string") {
            return this.al(a, b);
        }
        return e;
    }
    al(a, b) {
        return this.context.f(a, b);
    }
    ac(a) {
        let b = a.e();
        let c = new List$1(DescriptionTreeAction.$, 0);
        for (let d = 0; d < b.count; d++) {
            let e = new DescriptionTreeAction();
            e.a = 0;
            e.i = b._inner[d].c;
            e.c = b._inner[d].a;
            e.b = a;
            e.f = b._inner[d].b;
            c.add(e);
        }
        return c;
    }
    m(a, b, c) {
        if (c.b == null) {
            return this.i(a, b, c);
        }
        else {
            let d = this.ay(a, b, c);
            this.a5(a, b, c, d);
        }
        return true;
    }
    a5(a, b, c, d) {
        let e = c.h(ComponentRenderer.platform);
        this.b.clearCollection(d, e, c.c);
    }
    bn(a, b, c) {
        this.b.setPropertyValue(a, b, c);
    }
    aw(a, b) {
        return this.b.getPropertyValue(a, b);
    }
    i(a, b, c) {
        return this.h(a, b);
    }
    h(a, b) {
        let c = this.b.getRootObject(a);
        if (c != null) {
            this.a8(a, c, b);
        }
        let d = false;
        this.b.clearContainer(a, this.context, (e) => {
            d = true;
            if (e) {
                this.bl(a, b);
            }
        });
        return d;
    }
}
ComponentRenderer.$t = markType(ComponentRenderer, 'ComponentRenderer');
ComponentRenderer.platform = 3;
//# sourceMappingURL=ComponentRenderer.js.map