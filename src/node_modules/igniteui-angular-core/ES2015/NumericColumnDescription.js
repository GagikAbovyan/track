/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { ColumnDescription } from "./ColumnDescription";
import { markType } from "./type";
export class NumericColumnDescription extends ColumnDescription {
    constructor() {
        super();
        this.b3 = null;
        this.b5 = null;
        this.b4 = null;
        this.b6 = null;
        this.bw = 0;
        this.bx = 0;
        this.by = 0;
        this.bu = false;
        this.b2 = null;
    }
    get_type() {
        return "NumericColumn";
    }
    get negativePrefix() {
        return this.b3;
    }
    set negativePrefix(a) {
        this.b3 = a;
        this.e("NegativePrefix");
    }
    get positivePrefix() {
        return this.b5;
    }
    set positivePrefix(a) {
        this.b5 = a;
        this.e("PositivePrefix");
    }
    get negativeSuffix() {
        return this.b4;
    }
    set negativeSuffix(a) {
        this.b4 = a;
        this.e("NegativeSuffix");
    }
    get positiveSuffix() {
        return this.b6;
    }
    set positiveSuffix(a) {
        this.b6 = a;
        this.e("PositiveSuffix");
    }
    get maxFractionDigits() {
        return this.bw;
    }
    set maxFractionDigits(a) {
        this.bw = a;
        this.e("MaxFractionDigits");
    }
    get minFractionDigits() {
        return this.bx;
    }
    set minFractionDigits(a) {
        this.bx = a;
        this.e("MinFractionDigits");
    }
    get minIntegerDigits() {
        return this.by;
    }
    set minIntegerDigits(a) {
        this.by = a;
        this.e("MinIntegerDigits");
    }
    get showGroupingSeparator() {
        return this.bu;
    }
    set showGroupingSeparator(a) {
        this.bu = a;
        this.e("ShowGroupingSeparator");
    }
    get formatOverrideRef() {
        return this.b2;
    }
    set formatOverrideRef(a) {
        this.b2 = a;
        this.e("FormatOverrideRef");
    }
}
NumericColumnDescription.$t = markType(NumericColumnDescription, 'NumericColumnDescription', ColumnDescription.$);
//# sourceMappingURL=NumericColumnDescription.js.map