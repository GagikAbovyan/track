/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { DefinitionBaseDescription } from "./DefinitionBaseDescription";
import { markType } from "./type";
export class ColumnDescription extends DefinitionBaseDescription {
    constructor() {
        super();
        this.a9 = 0;
        this.bb = 0;
        this.ba = 0;
        this.a8 = 0;
        this.bj = null;
        this.bk = null;
        this.bi = null;
        this.bg = null;
        this.bl = null;
        this.bh = null;
        this.aw = null;
        this.a6 = 0;
        this.ay = false;
        this.au = null;
        this.az = false;
        this.a0 = false;
        this.a1 = false;
        this.bm = null;
    }
    get_type() {
        return "Column";
    }
    get paddingLeft() {
        return this.a9;
    }
    set paddingLeft(a) {
        this.a9 = a;
        this.e("PaddingLeft");
    }
    get paddingTop() {
        return this.bb;
    }
    set paddingTop(a) {
        this.bb = a;
        this.e("PaddingTop");
    }
    get paddingRight() {
        return this.ba;
    }
    set paddingRight(a) {
        this.ba = a;
        this.e("PaddingRight");
    }
    get paddingBottom() {
        return this.a8;
    }
    set paddingBottom(a) {
        this.a8 = a;
        this.e("PaddingBottom");
    }
    get name() {
        return this.bj;
    }
    set name(a) {
        this.bj = a;
        this.e("Name");
    }
    get propertyPath() {
        return this.bk;
    }
    set propertyPath(a) {
        this.bk = a;
        this.e("PropertyPath");
    }
    get headerText() {
        return this.bi;
    }
    set headerText(a) {
        this.bi = a;
        this.e("HeaderText");
    }
    get actualHeaderText() {
        return this.bg;
    }
    set actualHeaderText(a) {
        this.bg = a;
        this.e("ActualHeaderText");
    }
    get selectedBackground() {
        return this.bl;
    }
    set selectedBackground(a) {
        this.bl = a;
        this.e("SelectedBackground");
    }
    get actualSelectedBackground() {
        return this.bh;
    }
    set actualSelectedBackground(a) {
        this.bh = a;
        this.e("ActualSelectedBackground");
    }
    get animationSettings() {
        return this.aw;
    }
    set animationSettings(a) {
        this.aw = a;
        this.e("AnimationSettings");
    }
    get minWidth() {
        return this.a6;
    }
    set minWidth(a) {
        this.a6 = a;
        this.e("MinWidth");
    }
    get isAutoGenerated() {
        return this.ay;
    }
    set isAutoGenerated(a) {
        this.ay = a;
        this.e("IsAutoGenerated");
    }
    get filter() {
        return this.au;
    }
    set filter(a) {
        this.au = a;
        this.e("Filter");
    }
    get isFilteringEnabled() {
        return this.az;
    }
    set isFilteringEnabled(a) {
        this.az = a;
        this.e("IsFilteringEnabled");
    }
    get isHidden() {
        return this.a0;
    }
    set isHidden(a) {
        this.a0 = a;
        this.e("IsHidden");
    }
    get shouldRemoveWhenHidden() {
        return this.a1;
    }
    set shouldRemoveWhenHidden(a) {
        this.a1 = a;
        this.e("ShouldRemoveWhenHidden");
    }
    get sortDirection() {
        return this.bm;
    }
    set sortDirection(a) {
        this.bm = a;
        this.e("SortDirection");
    }
}
ColumnDescription.$t = markType(ColumnDescription, 'ColumnDescription', DefinitionBaseDescription.$);
//# sourceMappingURL=ColumnDescription.js.map