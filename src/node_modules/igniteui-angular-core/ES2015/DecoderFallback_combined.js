//
// DecoderReplacementFallbackBuffer.cs
//
// Author:
//	Atsushi Enomoto <atsushi@ximian.com>
//
import { Base, callStaticConstructors, markType, typeCast } from "./type";
import { DecoderFallbackBuffer } from "./DecoderFallbackBuffer";
import { DecoderExceptionFallbackBuffer } from "./DecoderExceptionFallbackBuffer";
import { ArgumentNullException } from "./ArgumentNullException";
import { ArgumentException } from "./ArgumentException";
import { ArgumentOutOfRangeException } from "./ArgumentOutOfRangeException";
import { charMinValue } from "./string";
export class DecoderFallback extends Base {
    constructor() {
        super();
    }
    static staticInit() {
        DecoderFallback.b = new DecoderExceptionFallback();
        DecoderFallback.d = new DecoderReplacementFallback(0);
        DecoderFallback.f = new DecoderReplacementFallback(1, "ï¿½");
    }
    static get c() {
        return DecoderFallback.b;
    }
    static get e() {
        return DecoderFallback.d;
    }
    static get g() {
        return DecoderFallback.f;
    }
}
DecoderFallback.$t = markType(DecoderFallback, 'DecoderFallback');
DecoderFallback.b = null;
DecoderFallback.d = null;
DecoderFallback.f = null;
export class DecoderExceptionFallback extends DecoderFallback {
    constructor() {
        super();
    }
    get_a() {
        return 0;
    }
    get a() {
        return this.get_a();
    }
    h() {
        return new DecoderExceptionFallbackBuffer();
    }
    equals(a) {
        return (typeCast(DecoderExceptionFallback.$, a) !== null);
    }
    getHashCode() {
        return 0;
    }
}
DecoderExceptionFallback.$t = markType(DecoderExceptionFallback, 'DecoderExceptionFallback', DecoderFallback.$);
export class DecoderReplacementFallback extends DecoderFallback {
    constructor(a, ..._rest) {
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    let c = ["?"];
                    {
                        let e = c[0];
                        super();
                        this.j = null;
                        if (e == null) {
                            throw new ArgumentNullException(0, "replacement");
                        }
                        this.j = e;
                    }
                }
                break;
            case 1:
                {
                    let c = _rest[0];
                    super();
                    this.j = null;
                    if (c == null) {
                        throw new ArgumentNullException(0, "replacement");
                    }
                    this.j = c;
                }
                break;
        }
    }
    get i() {
        return this.j;
    }
    get_a() {
        return this.j.length;
    }
    get a() {
        return this.get_a();
    }
    h() {
        return new DecoderReplacementFallbackBuffer(this);
    }
    equals(a) {
        let b = typeCast(DecoderReplacementFallback.$, a);
        return b != null && this.j == b.j;
    }
    getHashCode() {
        return Base.getHashCodeStatic(this.j);
    }
}
DecoderReplacementFallback.$t = markType(DecoderReplacementFallback, 'DecoderReplacementFallback', DecoderFallback.$);
export class DecoderReplacementFallbackBuffer extends DecoderFallbackBuffer {
    constructor(a) {
        super();
        this.f = false;
        this.g = 0;
        this.h = null;
        if (a == null) {
            throw new ArgumentNullException(0, "fallback");
        }
        this.h = a.i;
        this.g = 0;
    }
    get_d() {
        return this.f ? this.h.length - this.g : 0;
    }
    get d() {
        return this.get_d();
    }
    a(a, b) {
        if (a == null) {
            throw new ArgumentNullException(0, "bytesUnknown");
        }
        if (this.f && this.d != 0) {
            throw new ArgumentException(1, "Reentrant Fallback method invocation occured. It might be because either this FallbackBuffer is incorrectly shared by multiple threads, invoked inside Encoding recursively, or Reset invocation is forgotten.");
        }
        if (b < 0 || a.length < b) {
            throw new ArgumentOutOfRangeException(1, "index");
        }
        this.f = true;
        this.g = 0;
        return this.h.length > 0;
    }
    c() {
        if (!this.f) {
            return '\0';
        }
        if (this.g >= this.h.length) {
            return charMinValue();
        }
        return this.h.charAt(this.g++);
    }
    b() {
        if (this.g == 0) {
            return false;
        }
        this.g--;
        return true;
    }
    e() {
        this.f = false;
        this.g = 0;
    }
}
DecoderReplacementFallbackBuffer.$t = markType(DecoderReplacementFallbackBuffer, 'DecoderReplacementFallbackBuffer', DecoderFallbackBuffer.$);
callStaticConstructors();
//# sourceMappingURL=DecoderFallback_combined.js.map