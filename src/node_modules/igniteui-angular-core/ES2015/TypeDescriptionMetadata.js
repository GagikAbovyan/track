/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { TypeDescriptionPlatform_$type } from "./TypeDescriptionPlatform";
import { Dictionary$2 } from "./Dictionary$2";
import { stringContains } from "./string";
export class TypeDescriptionMetadata extends Base {
    constructor() {
        super(...arguments);
        this.i = null;
        this.j = null;
        this.a = 0;
        this.l = null;
        this.k = null;
        this.f = null;
        this.c = new Dictionary$2(TypeDescriptionPlatform_$type, String_$type, 0);
        this.d = new Dictionary$2(TypeDescriptionPlatform_$type, String_$type, 0);
    }
    m(a, b) {
        if (stringContains(b, "/")) {
            let c = b.split('/');
            this.d.item(a, c[1].trim());
            this.c.item(a, c[0].trim());
        }
        else {
            this.c.item(a, b.trim());
        }
    }
    static e(a) {
        return a.substr(0, 1).toLowerCase() + a.substr(1);
    }
    g(a) {
        let b = "";
        if (this.c.containsKey(a)) {
            b = this.c.item(a);
        }
        else {
            b = this.j;
        }
        if (TypeDescriptionMetadata.b(a)) {
            return TypeDescriptionMetadata.e(b);
        }
        return b;
    }
    static b(a) {
        if (a == 3 || a == 1 || a == 4 || a == 2) {
            return true;
        }
        return false;
    }
    h(a) {
        if (this.d.containsKey(a)) {
            return this.d.item(a);
        }
        else {
            return null;
        }
    }
}
TypeDescriptionMetadata.$t = markType(TypeDescriptionMetadata, 'TypeDescriptionMetadata');
//# sourceMappingURL=TypeDescriptionMetadata.js.map